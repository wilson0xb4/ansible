---
- name: Setup Auto-Scaling
  hosts: tag_Name_sfb-demo
  remote_user: ubuntu
  gather_facts: yes

  tasks:

    - name: Create AMI
      local_action:
        module: ec2_ami
        region: "{{ region }}"
        instance_id: "{{ ec2_id }}"
        name: "sfb-ami-{{ ansible_date_time.epoch }}"
        description: "AMI created {{ ansible_date_time.iso8601 }}"
        wait: yes
      register: ami

    - name: Terminate EC2 instance used to make AMI
      local_action:
        module: ec2
        state: absent
        region: "{{ region }}"
        instance_ids: "{{ ec2_id }}"

    - name: Create Launch Configuration
      local_action:
        module: ec2_lc
        region: "{{ region }}"
        name: "sfb-lc-{{ ansible_date_time.epoch }}"
        image_id: "{{ ami.image_id }}"
        key_name: "{{ ssh_key }}"
        instance_type: "{{ instance_type }}"
        security_groups: "{{ security_group }}"
        instance_monitoring: yes
        #spot_price: 0.03
      register: lc

    - name: Create Auto-Scaling Group
      local_action:
        module: ec2_asg
        name: sfb-asg
        launch_config_name: "{{ lc.name }}"
        load_balancers: "{{ elb_dns_name }}"
        health_check_period: 60
        health_check_type: ELB
        replace_all_instances: yes
        replace_batch_size: 1
        min_size: 1
        max_size: 5
        desired_capacity: 2
        region: "{{ region }}"
        wait_for_instances: no
        wait_timeout: 1000
      register: asg

    - name: scaledown-policy
      local_action:
        module: ec2_scaling_policy
        state: present
        region: "{{ region }}"
        name: "sfb-scaledown-policy"
        adjustment_type: "ChangeInCapacity"
        asg_name: "{{ asg.name }}"
        scaling_adjustment: -1
        min_adjustment_step: 1
        cooldown: 300
      register: sdp

    - name: scaleup-policy
      local_action:
        module: ec2_scaling_policy
        state: present
        region: "{{ region }}"
        name: "sfb-scaleup-policy"
        adjustment_type: "ChangeInCapacity"
        asg_name: "{{ asg.name }}"
        scaling_adjustment: +1
        min_adjustment_step: 1
        cooldown: 300
      register: sup

    - name: Create Alarm to ScaleDown
      local_action:
        module: ec2_metric_alarm
        state: present
        region: "{{ region }}"
        name: "sfb-cpu-low"
        metric: "CPUUtilization"
        namespace: "AWS/EC2"
        statistic: Average
        comparison: "<="
        threshold: 30.0
        period: 300
        evaluation_periods: 3
        unit: "Percent"
        description: "This will alarm when cpu usage average is lower than 30% for 15 minutes "
        dimensions: AutoScalingGroupName={{ asg.name }}
        alarm_actions: "{{ sdp.arn }}"

    - name: Create Alarm to ScaleUp
      local_action:
        module: ec2_metric_alarm
        state: present
        region: "{{ region }}"
        name: "sfb-cpu-high"
        metric: "CPUUtilization"
        namespace: "AWS/EC2"
        statistic: Average
        comparison: ">="
        threshold: 60.0
        period: 300
        evaluation_periods: 3
        unit: "Percent"
        description: "This will alarm when cpu usage average is greater than 60% for 15 minutes "
        dimensions: AutoScalingGroupName={{ asg.name }}
        alarm_actions: "{{ sup.arn }}"

    - name: Site viewable at...
      debug: msg="{{ elb_dns_name }}"

